[gd_resource type="ShaderMaterial" load_steps=12 format=2]

[ext_resource path="res://assets/textures/metal2/Metal02_col.jpg" type="Texture" id=1]
[ext_resource path="res://assets/textures/metal2/Metal02_nrm.jpg" type="Texture" id=2]
[ext_resource path="res://assets/textures/metal2/Metal02_rgh.jpg" type="Texture" id=3]
[ext_resource path="res://assets/textures/metal2/Metal02_met.jpg" type="Texture" id=4]

[sub_resource type="VisualShaderNodeTexture" id=1]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeColorOp" id=2]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 0.8, 0 ) ]
operator = 4

[sub_resource type="VisualShaderNodeColorConstant" id=3]
constant = Color( 1, 0.294118, 0, 1 )

[sub_resource type="VisualShaderNodeTexture" id=4]
texture = ExtResource( 2 )
texture_type = 2

[sub_resource type="VisualShaderNodeTexture" id=5]
texture = ExtResource( 4 )

[sub_resource type="VisualShaderNodeTexture" id=6]
texture = ExtResource( 3 )

[sub_resource type="VisualShader" id=7]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_2;
uniform sampler2D tex_frg_7;
uniform sampler2D tex_frg_8;
uniform sampler2D tex_frg_6 : hint_normal;



void vertex() {
// Output:0

}

void fragment() {
// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Color:5
	vec3 n_out5p0 = vec3(1.000000, 0.294118, 0.000000);
	float n_out5p1 = 1.000000;

// ColorOp:4
	vec3 n_out4p0;
	{
		float base = n_out2p0.x;
		float blend = n_out5p0.x;
		if (base < 0.5) {
			n_out4p0.x = 2.0 * base * blend;
		} else {
			n_out4p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out2p0.y;
		float blend = n_out5p0.y;
		if (base < 0.5) {
			n_out4p0.y = 2.0 * base * blend;
		} else {
			n_out4p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out2p0.z;
		float blend = n_out5p0.z;
		if (base < 0.5) {
			n_out4p0.z = 2.0 * base * blend;
		} else {
			n_out4p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// Texture:7
	vec4 tex_frg_7_read = texture(tex_frg_7, UV.xy);
	vec3 n_out7p0 = tex_frg_7_read.rgb;
	float n_out7p1 = tex_frg_7_read.a;

// Texture:8
	vec4 tex_frg_8_read = texture(tex_frg_8, UV.xy);
	vec3 n_out8p0 = tex_frg_8_read.rgb;
	float n_out8p1 = tex_frg_8_read.a;

// Texture:6
	vec4 tex_frg_6_read = texture(tex_frg_6, UV.xy);
	vec3 n_out6p0 = tex_frg_6_read.rgb;
	float n_out6p1 = tex_frg_6_read.a;

// Output:0
	ALBEDO = n_out4p0;
	METALLIC = dot(n_out7p0, vec3(0.333333, 0.333333, 0.333333));
	ROUGHNESS = dot(n_out8p0, vec3(0.333333, 0.333333, 0.333333));
	NORMALMAP = n_out6p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 230.75, 345.25 )
nodes/fragment/0/position = Vector2( 1020, 320 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -120, 160 )
nodes/fragment/4/node = SubResource( 2 )
nodes/fragment/4/position = Vector2( 340, 260 )
nodes/fragment/5/node = SubResource( 3 )
nodes/fragment/5/position = Vector2( 100, 380 )
nodes/fragment/6/node = SubResource( 4 )
nodes/fragment/6/position = Vector2( 100, 520 )
nodes/fragment/7/node = SubResource( 5 )
nodes/fragment/7/position = Vector2( 300, 20 )
nodes/fragment/8/node = SubResource( 6 )
nodes/fragment/8/position = Vector2( 540, 360 )
nodes/fragment/connections = PoolIntArray( 2, 0, 4, 0, 4, 0, 0, 0, 5, 0, 4, 1, 6, 0, 0, 8, 7, 0, 0, 2, 8, 0, 0, 3 )

[resource]
shader = SubResource( 7 )
