[gd_resource type="ShaderMaterial" load_steps=12 format=2]

[ext_resource path="res://assets/textures/Map #43.002.jpg" type="Texture" id=1]
[ext_resource path="res://addons/shaderV/rgba/normalFromHeightmap.gd" type="Script" id=2]
[ext_resource path="res://assets/textures/Platten.jpg" type="Texture" id=3]

[sub_resource type="VisualShaderNodeScalarUniform" id=1]
uniform_name = "bumpStrength"

[sub_resource type="VisualShaderNodeTextureUniform" id=2]
output_port_for_preview = 0
uniform_name = "ColorMap"
texture_type = 1

[sub_resource type="VisualShaderNodeScalarUniform" id=3]
uniform_name = "Specular"

[sub_resource type="VisualShaderNodeTextureUniform" id=4]
output_port_for_preview = 0
uniform_name = "higthMap"
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id=5]
output_port_for_preview = 0
default_input_values = [ 2, Vector3( 64, 64, 0 ), 3, 10, 4, false, 5, false, 6, false ]
script = ExtResource( 2 )

[sub_resource type="VisualShaderNodeScalarUniform" id=6]
uniform_name = "Metalic"

[sub_resource type="VisualShaderNodeScalarUniform" id=7]
uniform_name = "Roughness"

[sub_resource type="VisualShader" id=8]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D ColorMap : hint_albedo;
uniform float Metalic;
uniform float Roughness;
uniform float Specular;
uniform sampler2D higthMap : hint_albedo;
uniform float bumpStrength;


// NormalFromHeightmap

vec3 normalFromHeightmapFunc(vec2 _hm_uv, sampler2D _hm_tex, vec2 _hm_size, float _norm_hm_strgth, bool _conv_hm_gray, bool _inv_x_norm, bool _inv_y_norm){
	vec3 _hm_down = textureLod(_hm_tex, _hm_uv + vec2(0.0, 1.0 / _hm_size.y), 0.0).rgb;
	vec3 _hm_up = textureLod(_hm_tex, _hm_uv - vec2(0.0, 1.0 / _hm_size.y), 0.0).rgb;
	vec3 _hm_right = textureLod(_hm_tex, _hm_uv + vec2(1.0 / _hm_size.x, 0.0), 0.0).rgb;
	vec3 _hm_left = textureLod(_hm_tex, _hm_uv - vec2(1.0 / _hm_size.x, 0.0), 0.0).rgb;
	
	if (_conv_hm_gray) {
		_hm_down.r = 0.2126 * _hm_down.r + 0.7152 * _hm_down.g + 0.0722 * _hm_down.b;
		_hm_up.r = 0.2126 * _hm_up.r + 0.7152 * _hm_up.g + 0.0722 * _hm_up.b;
		_hm_right.r = 0.2126 * _hm_right.r + 0.7152 * _hm_right.g + 0.0722 * _hm_right.b;
		_hm_left.r = 0.2126 * _hm_left.r + 0.7152 * _hm_left.g + 0.0722 * _hm_left.b;
	}
	
	float dx = (1.0 - float(_inv_x_norm)) * (_hm_left.r - _hm_right.r) + 
				(float(_inv_x_norm)) * (-_hm_left.r + _hm_right.r);
	float dy = (1.0 - float(_inv_y_norm)) * (_hm_up.r - _hm_down.r) + 
				(float(_inv_y_norm)) * (-_hm_up.r + _hm_down.r);
	
	return normalize(vec3(dx, dy, 1.0 / _norm_hm_strgth));
}


void vertex() {
// Output:0

}

void fragment() {
// TextureUniform:11
	vec3 n_out11p0;
	float n_out11p1;
	{
		vec4 n_tex_read = texture(ColorMap, UV.xy);
		n_out11p0 = n_tex_read.rgb;
		n_out11p1 = n_tex_read.a;
	}

// ScalarUniform:8
	float n_out8p0 = Metalic;

// ScalarUniform:9
	float n_out9p0 = Roughness;

// ScalarUniform:12
	float n_out12p0 = Specular;

// TextureUniform:6
	vec3 n_out6p0;
	float n_out6p1;
	{
		vec4 n_tex_read = texture(higthMap, UV.xy);
		n_out6p0 = n_tex_read.rgb;
		n_out6p1 = n_tex_read.a;
	}

// ScalarUniform:10
	float n_out10p0 = bumpStrength;

// NormalFromHeightmap:7
	vec3 n_in7p2 = vec3(64.00000, 64.00000, 0.00000);
	bool n_in7p4 = false;
	bool n_in7p5 = false;
	bool n_in7p6 = false;
	vec3 n_out7p0;
	{
		n_out7p0 = normalFromHeightmapFunc(UV.xy, higthMap, n_in7p2.xy, n_out10p0, n_in7p4, n_in7p5, n_in7p6);
	}

// Output:0
	ALBEDO = n_out11p0;
	METALLIC = n_out8p0;
	ROUGHNESS = n_out9p0;
	SPECULAR = n_out12p0;
	NORMALMAP = n_out7p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 62.3001, -1.25 )
nodes/fragment/0/position = Vector2( 760, 120 )
nodes/fragment/6/node = SubResource( 4 )
nodes/fragment/6/position = Vector2( -80, 220 )
nodes/fragment/7/node = SubResource( 5 )
nodes/fragment/7/position = Vector2( 280, 340 )
nodes/fragment/8/node = SubResource( 6 )
nodes/fragment/8/position = Vector2( 500, 40 )
nodes/fragment/9/node = SubResource( 7 )
nodes/fragment/9/position = Vector2( 440, 140 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -20, 520 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 160, -40 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 460, 260 )
nodes/fragment/connections = PoolIntArray( 6, 2, 7, 0, 7, 0, 0, 8, 8, 0, 0, 2, 9, 0, 0, 3, 10, 0, 7, 3, 11, 0, 0, 0, 12, 0, 0, 4 )

[resource]
shader = SubResource( 8 )
shader_param/Metalic = 0.993
shader_param/Roughness = 0.875
shader_param/Specular = 3.896
shader_param/bumpStrength = 1.063
shader_param/ColorMap = ExtResource( 3 )
shader_param/higthMap = ExtResource( 1 )
