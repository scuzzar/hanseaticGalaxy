[gd_resource type="ShaderMaterial" load_steps=12 format=2]

[ext_resource path="res://assets/textures/Plates/Platten.jpg" type="Texture" id=1]
[ext_resource path="res://Station/SpaceStation/Ligths.tres" type="Texture" id=2]
[ext_resource path="res://assets/textures/Plates/Plates_Rougness.png" type="Texture" id=3]
[ext_resource path="res://assets/textures/Plates/Plates_Normal.png" type="Texture" id=4]

[sub_resource type="VisualShaderNodeTexture" id=1]
texture = ExtResource( 4 )
texture_type = 2

[sub_resource type="VisualShaderNodeTexture" id=2]
texture = ExtResource( 1 )
texture_type = 1

[sub_resource type="VisualShaderNodeVectorInterp" id=3]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeTexture" id=4]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeTexture" id=5]
texture = ExtResource( 3 )

[sub_resource type="VisualShaderNodeScalarConstant" id=6]
constant = -0.4

[sub_resource type="VisualShader" id=7]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_3 : hint_albedo;
uniform sampler2D tex_frg_5;
uniform sampler2D tex_frg_6;
uniform sampler2D tex_frg_2 : hint_normal;



void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Texture:5
	vec4 tex_frg_5_read = texture(tex_frg_5, UV.xy);
	vec3 n_out5p0 = tex_frg_5_read.rgb;
	float n_out5p1 = tex_frg_5_read.a;

// VectorMix:4
	vec3 n_in4p1 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out4p0 = mix(n_out3p0, n_in4p1, n_out5p0);

// Texture:6
	vec4 tex_frg_6_read = texture(tex_frg_6, UV.xy);
	vec3 n_out6p0 = tex_frg_6_read.rgb;
	float n_out6p1 = tex_frg_6_read.a;

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Scalar:7
	float n_out7p0 = -0.400000;

// Output:0
	ALBEDO = n_out4p0;
	ROUGHNESS = dot(n_out6p0, vec3(0.333333, 0.333333, 0.333333));
	EMISSION = n_out5p0;
	NORMALMAP = n_out2p0;
	ANISOTROPY = n_out7p0;
	ANISOTROPY_FLOW = n_out6p0.xy;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -361, 310 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -180, 620 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -260, 80 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 60, 120 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( -240, 320 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( -20, -80 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( 80, 440 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 8, 3, 0, 4, 0, 4, 0, 0, 0, 5, 0, 4, 2, 6, 0, 0, 3, 5, 0, 0, 5, 6, 0, 0, 15, 7, 0, 0, 14 )

[resource]
shader = SubResource( 7 )
